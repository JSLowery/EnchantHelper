<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, August 26, 2016, 7:07 PM -->
<!-- MuClient version 4.98 -->

<!-- Plugin "EnchantHelper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="EnchantHelper"
   author="Sonet"
   id="70c3be2f1e1957b65d74fb05"
   language="Lua"
   purpose="Help enchant stuff."
   save_state="y"
   date_written="2016-08-26 19:07:01"
   requires="4.79"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   match="^Unsatisfied with your focus, you darken the (.*).$"
   script="EnchanterDis"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^Unsatisfied with your focus, you silence the (.*).$"
   script="EnchanterDis"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^Unsatisfied with your focus, you return invisibility to (.*).$"
   script="EnchanterDis"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^You buy (.*) from (.*) for (.*) gold.$"
   name="GetNameItem"
   script="ParseName"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^Magic pulses through (.*), enhancing its power.$"
   name="SolAndIllMsgGood"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  
  <trigger
   match="^You lost your concentration while trying to cast (.*).$"
   name="ConcentrateFail"
   script="FailedConcentration"
   regexp="y"
   group="EnchantMsgs" 
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^(.*) begins to hum softly.$"
   name="ResSuccessM"
   script="ResSuccessMsg"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  ></trigger>

  <trigger
   match="^(.*) starts to glow brightly as you infuse it with holy magic.$"
   name="IllumSuccesMsg"
   script="IllumSuccessMsg"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  
  </trigger>
  <trigger
   match="^(.*) is already glowing.$"
   name="IllumComplete"
   regexp="y"
   script="IllumSuccessMsg"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^(.*) is already humming gently.$"
   
   regexp="y"
   script="ResSuccessMsg"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^(.*) is not invisible.$"
   name="SolidComplete"
   regexp="y"
   script="SolidSuccessMsg"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^You solidify (.*) making it visible again.$"
   name="SolidSuccesMsg"
   script="SolidSuccessMsg"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^Magic pulses through (.*), blessing it with fortune.$"
   name="ResMsgGood"
   regexp="y"
   group="EnchantMsgs"
   send_to="12"
   sequence="100"
  >
  </trigger>
                                 <!-- Identify block of triggers -->
  <trigger
   
   match="^\| Enchants\:                                                       \|$"
   name="EnchantStart"
   regexp="y"
   script="startChecker"
   send_to="12"
   group="EnchantId"
   sequence="100"
  >
  </trigger>
 
 
  <trigger
   match="^\| (.+)\s*\: (.+) \+(\d)\s* \(.+\)  \|$"
   name="Enchant_Grabber"
   regexp="y"
   send_to="12"
   script="illumWisFirst"
   group="EnchantId"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^\| Flags      \: (.*)\s* \|$"
   name="Flag_Grabber"
   regexp="y"
   send_to="12"
   script="flags"
   group="EnchantId"
   sequence="100"
  >
  </trigger>
  
  <trigger
   match="^\+-----------------------------------------------------------------\+$"
   name="EndChecker"
   regexp="y"
   send_to="12"
   group="EnchantI"
   script="EndChecker"
   sequence="100"
  >
  </trigger>
  <trigger
   match="^(.)(.*)$"
   enabled="n"
   regexp="y"
   send_to="12"
   sequence="100"
   script="capid"
   group="capid"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   match="^\+"
   enabled="n"
   regexp="y"
   send_to="12"
   sequence="100"
   group="capid_first"
   omit_from_output="y"
   >
   <send>
   EnableTriggerGroup("capid_first", 0)
   EnableTriggerGroup("capid", 1)
   </send>
   </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
<alias
   match="capid *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
    <send>local id = "id"
SetName('%1')
EnableTriggerGroup("capid_first", 1)
Send(id .. " %1")</send>
  </alias>
  <alias
   name="startEnchant"
   enabled="y"
   match="Estart (.*)"
   regexp="y"
   script="StartTheProcesses"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   enabled="y"
   match="^EOVERMAX (true|false)$"
   regexp="y"
   script="OverMaxFlags"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   enabled="y"
   match="^ESHOULDBUY (0|1)$"
   regexp="y"
   script="ShouldBuy"
   send_to="12"
   sequence="100"
  >
  </alias>
  <alias
   enabled="y"
   match="^EENCHANTER (true|false)$"
   regexp="y"
   script="EnchanterFlag"
   send_to="12"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Timers  -->

<timers>
  
</timers>

<!--  Variables  -->



<!--  Script  -->


<script>
<![CDATA[
require "serialize"
require "tprint"
Debug = false
ThreeSuccessesVar = {false, false, false} 
reEnchantFlag = {false, false, false}
enchantCheck={false, false, false}
statHolder = {}
tableindex = 1
local ItemName
local MAX_FLAG = false
local ENCHANTER = false
local preg = rex.new([=[(?P<Spell>[A-Za-z]*)[ ]+: (?P<Stat>[A-Za-z ]+)[ ]+\+(?P<Value>[0-9]+)]=])
local Illum_Wis = ""
local Illum_Luck = ""
local Resonate_Luck = ""
local Resonate_OtherName = ""
local Resonate_Other = ""
local Solidify_Hitroll = ""
local Solidify_Damroll = ""
LastSpell = ""
Should_Buy = 0
function flags (name, line, wildcards)
  DebugNote(wildcards)
  enchantCheck={false, false, false}
  statHolder= {}
  if string.find(wildcards[1], "glow") then enchantCheck[1] = true
    statHolder[#statHolder+1] = {"Illuminate", holder, 0}
  end
  if string.find(wildcards[1], "hum") then enchantCheck[2] = true
    statHolder[#statHolder+1] = {"Resonate", holder, 0}
  end
  if not string.find(wildcards[1], "invis") then enchantCheck[3] = true
    statHolder[#statHolder+1] = {"Solidify", holder, 0}
  end
  DebugNote(statHolder)
end
local FocusRemove = false
function EnchanterDis ()
  FocusRemove = true
end
function ShouldBuy(name, line, wildcards)
  flag = tonumber(wildcards[1])
  Should_Buy = flag
end
function EnchanterFlag(name, line, wildcards)
 DebugNote(wildcards)
  if wildcards[1]== 'true' then
    ENCHANTER = true
  else
    ENCHANTER = false
  end
  Note("Enchanter = "..tostring(ENCHANTER))
end
function OverMaxFlags(name, line, wildcards)
  DebugNote(wildcards)
  if wildcards[1]== 'true' then
    MAX_FLAG = true
  else
    MAX_FLAG = false
  end
  Note("Over Max flag ="..tostring(MAX_FLAG))
end
function StartTheProcesses(name, line, wildcards)
  DebugNote("StartTheProcesses")
  DebugNote(wildcards)
  if Should_Buy == 1 then
    Send("buy "..wildcards[1])
  end
  statHolder = {}
  statHolder[1] = {"Illuminate", 0, 0}
  SetName(wildcards[1])
  reEnchantFlag= {false, false,false }
  EnchantItems()
end
function decideKeep()
  DebugNote("decideKeep")
  DebugNote(#statHolder)
  if FocusRemove == true then
    reEnchant(#statHolder)
    FocusRemove = false
    return
  end
  local tbl = statHolder[#statHolder] or {}
  DebugNote(tbl)
  --for i, v in pairs (tbl) do
    --DebugNote(v)
    if MAX_FLAG == true then
      if tbl[1] == "Illuminate" and tbl[2] < 4 or tbl[2] == 4 and tbl[3] == 0 then
          if reEnchantFlag[#statHolder] == false and tbl[2] ~= 0 then 
            reEnchant(#statHolder)
          else
            Send("sell ".. GetName())
            tryAgain()
            TriggersOff()
          end
        elseif tbl[1] == "Resonate" and tbl[2] < 3 or tbl[2] == 3 and tbl[3] == 0 then
          if reEnchantFlag[#statHolder] == false and tbl[2] ~= 0 then 
            reEnchant(#statHolder)
          else
            Send("sell ".. GetName())
            tryAgain()
            TriggersOff()
          end
        elseif tbl[1] == "Solidify" and tbl[2] < 6 then
          if tbl[3]== 6 then return end
          if reEnchantFlag[#statHolder] == false and tbl[2] ~= 0 then 
            reEnchant(#statHolder)
          else
            Send("sell ".. GetName())
            tryAgain()
            TriggersOff()
          end
          DebugNote("Got to silidify")
      else 
        if tbl[1] == "Illuminate" and tbl[2] == 4 and tbl[3] == 4 then 
          ThreeSuccessesVar = {true, false, true}
          Send ("c 415 ".. GetName())
        elseif tbl[1] == "Resonate" and tbl[2] == 2 and tbl[3] ~= 4 then
          ThreeSuccessesVar = {true, true, false}
          Send ("c 339 ".. GetName())
        end
      end
    else -- if MAX_FLAG is false
      DebugNote("In the false block for MAX_FLAG")
      if tbl[1] == "Illuminate" and tbl[2] < 4 then
        DebugNote("Illuminate was less than 4")
        if reEnchantFlag[#statHolder] == false and tbl[2] < 4 and ENCHANTER == true then 
          reEnchant(#statHolder)
        else
          Send("sell ".. GetName())
          tryAgain()
          TriggersOff()
        end
      elseif tbl[1] == "Resonate" and tbl[2] < 3  then
        if reEnchantFlag[#statHolder] == false and tbl[2] <3  and ENCHANTER == true then 
          reEnchant(#statHolder)
        else
          Send("sell ".. GetName())
          tryAgain()
          TriggersOff()
        end
      elseif tbl[1] == "Solidify" and tbl[2] < 6 then
        if tbl[3]== 6 then return end
        if reEnchantFlag[#statHolder] == false and tbl[2] <6 and ENCHANTER == true then 
          if tbl[3] == 6 then return end
          reEnchant(#statHolder)
        else
          Send("sell ".. GetName())
          tryAgain()
          TriggersOff()

        end
        DebugNote("Got to silidify")
      else 
        if tbl[1] == "Illuminate" and tbl[2] == 4 or tbl[3] == 4 then 
          ThreeSuccessesVar = {true, false, true}
          statHolder[2] = {"Resonate", 0, 0}
          Send ("c 415 ".. GetName())
        elseif tbl[1] == "Resonate" and tbl[2] == 3 or tbl[3] == 3 then
          ThreeSuccessesVar = {true, true, false}
          statHolder[3] = {"Solidify", 0, 0}
          Send ("c 339 ".. GetName())
        end
      end
     
    end
 -- end
 
end

function TriggersOff()
  EnableTriggerGroup("EnchantMsgs", 0)
  EnableTriggerGroup("EnchantId", 0)
end
function reEnchant(msg)
  DebugNote("reEnchant")
  DebugNote(reEnchantFlag)
  DebugNote(msg)
  if not ENCHANTER then return end
  DebugNote(tostring(FocusRemove))
  if FocusRemove == true then
    Send("c " .. statHolder[msg][1].. " ".. GetName())
    EnableTrigger("IllumSuccessMsg", 1)
    FocusRemove = false
  elseif  reEnchantFlag[msg] == false  then
    Send("Disenchant ".." "..GetName().." ".. statHolder[msg][1].. " ".. "confirm")
    Send("c " .. statHolder[msg][1].. " ".. GetName())
    statHolder[msg][2] = 0
    reEnchantFlag[msg]= true
    EnableTrigger("IllumSuccessMsg", 1)
  end
  -- if msg == "Resonate"  then
  --  Send("Disenchant ".." "..GetName().." ".. msg.. " confirm")
  --   Send("c " .. msg.. " ".. GetName())
  --   reEnchantFlag[2]= true
  -- end
  -- if msg == "Solidify"  then
  --   Send("Disenchant ".." "..GetName().." ".. msg.. " confirm")
  --   Send("c " .. msg.. " ".. GetName())
  --   reEnchantFlag[3]= true
  -- end
 -- EnableTriggerGroup("EnchantId", true)
 -- Send("id ".. GetName())
end
function EnchantItems()
  EnableTriggerGroup("EnchantMsgs", true)
  DebugNote("EnchantItems")
  ThreeSuccessesVar = {false, true , true} -- set back to all false when live ----------------------------------------------------------------
  if GetName() == nil then print ("fuck no name in EnchantItems() report this!") return end
 -- AddTimer("IllumTime", 0, 0, 2, "", 1, 'IllumFailed')
  Send("c 336 ".. GetName()) -- illuminate
 -- AddTimer("ResTime", 0, 0, 3, "", 0, 'ResFailed')
 --  Send("c 415 ".. GetName()) -- Resonate
 -- -- AddTimer("SolidTime", 0, 0, 4, "", 1, 'SolidFailed')
 --  Send("c 339 ".. GetName()) -- Solidify
end
function ParseName(name, line, wildcards)
  DebugNote(wildcards[1])
end
function illumWisFirst(name, line, wildcards) -- refractor name
  -- DebugNote (name)
  DebugNote (statHolder)
  -- DebugNote (wildcards)
  DebugNote("|"..trim(wildcards[1]).."|")
  if trim(wildcards[1]) ~= "" then
    statHolder[tableindex] = {trim(wildcards[1]), wildcards[2], tonumber(wildcards[3])}
  else
    statHolder[tableindex] = {statHolder[tableindex-1][1], wildcards[2], tonumber(wildcards[3])}
  end
   tableindex = tableindex + 1
   for i,p in pairs(enchantCheck) do
    if p == true and CheckStatHolder(i) then
    

    end
   end
  DebugNote(statHolder)
end
function CheckStatHolder(num)
  for i, p in pairs (statHolder) do 
    
  end
end
function tryAgain ()
  ColourNote("black", "white"," Was not acceptable, sold it so try again!"  )
end
function trim(s)
  return s:match'^%s*(.*%S)' or ''
end
function SolidFailed()
  DebugNote("SolidFailed")
  Send("c 339 ".. GetName())
end
function SolidSuccessMsg()
  DebugNote("SolidSuccessMSg")
  --DeleteTimer("SolidTime")
  SetSolSuccess()
  -- ThreeSuccesses()
  Execute("capid ".. GetName())
end
function ResFailed()
  DebugNote('ResFailed')
  Send("c 415 ".. GetName())
end
function ResSuccessMsg()
  DebugNote("ResSuccessMsg")
  SetResSuccess()
  -- ThreeSuccesses()
  Execute("capid ".. GetName())
end
function SetIlluSuccess()
  DebugNote("SetIlluSuccess")
  ThreeSuccessesVar[1] = true
end
function SetResSuccess()
  DebugNote('SetResSuccess')
  ThreeSuccessesVar[2] = true
end
function SetSolSuccess()
  DebugNote("SetSolSuccess")
  ThreeSuccessesVar[3] = true
end
function IllumFailed ()
  DebugNote("IllumFailed")
  Send("c 336 ".. GetName())
  --AddTimer("IllumTime", 0, 0, 2, "", 1, 'IllumFailed')
end
function IllumSuccessMsg(...)
  DebugNote("IllumSuccessMsg")
  --DeleteTimer("IllumTime")
  SetIlluSuccess()
  -- ThreeSuccesses()
  Execute("capid ".. GetName())
end
function ThreeSuccesses()
  DebugNote("ThreeSuccesses")
  if ThreeSuccessesVar[1] == true and ThreeSuccessesVar[2] == true and ThreeSuccessesVar[3] == true then
    Execute('capid '.. GetName())
    EnableTriggerGroup("EnchantMsgs", false)
   -- EnableTriggerGroup("EnchantId", true)
    
  else
    return
  end
end

function FailedConcentration(name, line, wildcards)
  DebugNote("ConcentrateFail")
  if wildcards[1] == 'illuminate' then
    IllumFailed()
  elseif wildcards[1] == 'resonate' then
    ResFailed()
  elseif wildcards[1] == 'solidify' then
    SolidFailed()
  end
end
function startChecker(name, line, wildcards)
  DebugNote("start")
  tableindex = 1
  statHolder = {}
  --EnableTrigger("EndChecker", true)
  
end
function  EndChecker( )
  DebugNote("end")
  --EnableTriggerGroup("EnchantId", false)
  --EnableTrigger("EndChecker", false)
  decideKeep()
end
function SetName(name)
  ItemName = name
end
function GetName()
  return ItemName
end
function DebugNote( msg )
  if Debug then
    if type(msg)== 'table' then
      tprint(msg)
    else
      Note (msg)
    end
  end--if
end
function capcheck(name, line, wildcards)
   a, b, c  = preg:match(wildcards[1])
   Note("Spell: ".. c["Spell"])
   Note("Stat: " .. c["Stat"])
   Note("Value: " .. c["Value"])

end

function capid(name, line, wildcards)
    local Spell
  local Stat
  local Value
 
    
  if wildcards[1] == "+" or wildcards[1] == "|" then
    DebugNote(line)
    a, b, c = preg:match(wildcards[2])
    if a ~= nil then
      Spell = c["Spell"]
      Stat = c["Stat"]
      Value = tonumber( c["Value"])
    else
      return
    end
    if Spell ~= "" then
      LastSpell = Spell
    end

    if LastSpell == "Illuminate" then
      statHolder[1] = {"Illuminate", 0, 0} 
      if Stat == "Wisdom" then Illum_Wis = Value
        statHolder[1][2] = Value 
      end
    if Stat == "Luck" then Illum_Luck = Value statHolder[1][3] = Value end
    end
    if LastSpell == "Resonate" then
      statHolder[2] = {"Resonate", 0, 0}
      if Stat == "Luck" then
        statHolder[2][2] = Value
      Resonate_Luck = Value
    else
      Resonate_OtherName = Stat
      Resonate_Other = Value
      statHolder[2][3] = Value
    end
    end
    if LastSpell == "Solidify" then
      statHolder[3] = {"Solidify", 0, 0}
      if Stat == "Hit roll" then Solidify_Hitroll = Value statHolder[3][2] = Value end
    if Stat == "Damage roll" then Solidify_Damroll = Value statHolder[3][3] = Value end
    end
  else
    --DebugNote(line)
    EnableTriggerGroup("capid", 0)
      local output = "Stats Added: Illuminate->Wisdom:" .. Illum_Wis
    if Illum_Luck ~= "" then output = output .. ",Luck:" .. Illum_Luck end
    output = output .. "|Resonate->Luck:" .. Resonate_Luck
    if Resonate_Other ~= "" then output = output .. "," .. Resonate_OtherName .. ":" .. Resonate_Other end
    output = output .. "|Solidify->"
    if Solidify_Hitroll ~= "" then output = output .. "Hitroll:" .. Solidify_Hitroll end
    if Solidify_Damroll ~= "" then output = output .. "Damroll:" .. Solidify_Damroll end
    DebugNote(statHolder)
    print(output)
    Illum_Wis = ""
    Illum_Luck = ""
    Resonate_Wis = ""
    Resonate_Luck = ""
    Resonate_OtherName = ""
    Resonate_Other = ""
    Solidify_Hitroll = ""
    Solidify_Damroll = ""
    decideKeep()
  end--you know....
end--FUN!
function OnPluginInstall()
Note("Dont forget to set Overmax and if you are an enchanter!!!!!")
Note(" This is Intentionally reset every time you restart!")
Note("  The default is OVERMAX no and not an enchanter!")
Note("")
Note("Use 'EOVERMAX true' to turn on Overmax")
Note("Use 'EENCHANTER true' to turn on Enchanter flag")
Note("Use 'ESHOULDBUY <1|0>' to toggle the buying functionality")
Note("Use 'Estart <item>'' to start the script")
end
]]>
</script>


</muclient>
